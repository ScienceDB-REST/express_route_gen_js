//
// POST REQUESTS
//
// add new <%- name %>
router.post('/<%- namePlLc -%>', <% include ../partials/acl_middleware %> function(req, res) {
    models.<%- name -%>.create(helper.assignForIntersectedKeys({
				<% include ../partials/set_attributes_for_update %>
    }, req.body)).then(function(<%- name %>) {
        return helper.setAssociations(
          models.<%- name -%>,
          <%- name -%>,
          req.body
        )
    }).then(function(<%- name %>) {
        res.json(<%- name -%>);
    }).catch(function(err) {
        res.status(500).json(err)
    })
});

// bulk create <%- namePl %> from uploaded CSV file
router.post('/<%- namePlLc -%>/upload_csv', <% include ../partials/acl_middleware %> function(req, res) {
    delim = req.body.delim
    cols = req.body.cols
    tmpFile = path.join(__dirname, '..', '..', 'tmp', uuidV4() + '.csv')
    req.files.csv_file.mv(tmpFile).then(() => {
      return helper.parseCsvStream(tmpFile, models.<%- name -%>, delim, cols)
    }).then(() => {
      res.status(200).json('OK')
    }).catch((err) => {
      console.trace(err)
      res.status(500).json(err)
    }).finally(() => {
      fs.unlinkSync(tmpFile)
    })
  });

// bulk create <%- namePl %> from uploaded xlsx Excel file
router.post('/<%- namePlLc -%>/upload_xlsx', <% include ../partials/acl_middleware %> function(req, res) {
    xlsxObjs = helper.parseXlsx(req.files.xlsx_file.data.toString('binary'))
    models.<%- name -%>.bulkCreate(
      xlsxObjs, {
        validate: true
      }).then(function(data) {
        res.json(data)
      }).catch(function(err) {
        res.status(500).json(err)
      })
  });
